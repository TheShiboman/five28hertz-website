import { useState, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Award, CheckCircle, Info, ShieldCheck, Home, Check } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useLocation, useRoute, Link } from "wouter";
import { Property } from "@shared/schema";

import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { 
  Form, 
  FormControl, 
  FormDescription, 
  FormField, 
  FormItem, 
  FormLabel, 
  FormMessage 
} from "@/components/ui/form";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

type CertificationStep = 'basicInfo' | 'safety' | 'amenities' | 'finalInspection';

interface CertificationForm {
  // Basic Info
  hasAccurateAddressInfo: boolean;
  hasAccuratePropertyType: boolean;
  hasAccurateOwnershipDocs: boolean;
  
  // Safety Standards
  hasSmokeDetectors: boolean;
  hasFireExtinguisher: boolean;
  hasEmergencyExits: boolean;
  hasFirstAidKit: boolean;
  
  // Amenities Verification
  hasVerifiedBedrooms: boolean;
  hasVerifiedBathrooms: boolean;
  hasVerifiedKitchenAppliances: boolean;
  hasVerifiedInternetAccess: boolean;
  
  // Final Inspection
  hasPassedOnSiteInspection: boolean;
  hasCompletedAllRequirements: boolean;
}

const defaultCertificationForm: CertificationForm = {
  // Basic Info
  hasAccurateAddressInfo: false,
  hasAccuratePropertyType: false,
  hasAccurateOwnershipDocs: false,
  
  // Safety Standards
  hasSmokeDetectors: false,
  hasFireExtinguisher: false,
  hasEmergencyExits: false,
  hasFirstAidKit: false,
  
  // Amenities Verification
  hasVerifiedBedrooms: false,
  hasVerifiedBathrooms: false,
  hasVerifiedKitchenAppliances: false,
  hasVerifiedInternetAccess: false,
  
  // Final Inspection
  hasPassedOnSiteInspection: false,
  hasCompletedAllRequirements: false,
};

export default function PropertyCertificationPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [location, setLocation] = useLocation();
  const [selectedPropertyId, setSelectedPropertyId] = useState<number | null>(null);
  const [activeStep, setActiveStep] = useState<CertificationStep>('basicInfo');
  const [certificationForm, setCertificationForm] = useState<CertificationForm>(defaultCertificationForm);
  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);
  
  // Get all properties
  const { data: properties, isLoading: isLoadingProperties } = useQuery<Property[]>({
    queryKey: ['/api/properties'],
    enabled: !!user,
  });
  
  // Update property mutation
  const updatePropertyMutation = useMutation({
    mutationFn: async ({ id, data }: { id: number; data: Partial<Property> }) => {
      const res = await apiRequest('PUT', `/api/properties/${id}`, data);
      return await res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });
      toast({
        title: "Certification update saved!",
        description: "Your property certification progress has been updated.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to update certification",
        description: error.message || "An error occurred while updating the certification.",
        variant: "destructive",
      });
    },
  });
  
  // Calculate certification progress based on form
  const calculateProgressPercentage = (form: CertificationForm): number => {
    const totalCheckboxes = Object.values(form).length;
    const checkedCount = Object.values(form).filter(value => value === true).length;
    return Math.round((checkedCount / totalCheckboxes) * 100);
  };
  
  // Get step progress (25%, 50%, 75%, 100%)
  const getStepProgress = (step: CertificationStep): number => {
    switch (step) {
      case 'basicInfo':
        return 25;
      case 'safety':
        return 50;
      case 'amenities':
        return 75;
      case 'finalInspection':
        return 100;
      default:
        return 0;
    }
  };
  
  // Get selected property
  const selectedProperty = properties?.find(p => p.id === selectedPropertyId);
  
  // Continue to next step
  const handleNextStep = () => {
    if (activeStep === 'basicInfo') {
      setActiveStep('safety');
    } else if (activeStep === 'safety') {
      setActiveStep('amenities');
    } else if (activeStep === 'amenities') {
      setActiveStep('finalInspection');
    } else {
      // Certification complete
      setIsFormDialogOpen(false);
      
      // Update property certification status
      if (selectedPropertyId) {
        const progress = calculateProgressPercentage(certificationForm);
        updatePropertyMutation.mutate({
          id: selectedPropertyId,
          data: {
            certificationProgress: progress,
            isCertified: progress === 100,
          }
        });
      }
    }
  };
  
  // Go back to previous step
  const handlePreviousStep = () => {
    if (activeStep === 'finalInspection') {
      setActiveStep('amenities');
    } else if (activeStep === 'amenities') {
      setActiveStep('safety');
    } else if (activeStep === 'safety') {
      setActiveStep('basicInfo');
    }
  };
  
  // Open certification form dialog for a property
  const startCertification = (propertyId: number) => {
    setSelectedPropertyId(propertyId);
    setActiveStep('basicInfo');
    setCertificationForm(defaultCertificationForm);
    setIsFormDialogOpen(true);
  };
  
  // Handle form change
  const handleFormChange = (field: keyof CertificationForm, value: boolean) => {
    setCertificationForm(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  // Get properties grouped by certification status
  const certifiedProperties = properties?.filter(p => p.isCertified) || [];
  const inProgressProperties = properties?.filter(p => !p.isCertified && (p.certificationProgress || 0) > 0) || [];
  const notStartedProperties = properties?.filter(p => !p.isCertified && (!p.certificationProgress || p.certificationProgress === 0)) || [];
  
  if (isLoadingProperties) {
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="animate-pulse text-primary">Loading properties...</div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-[#FAFAFA] bg-gradient-to-b from-[#FAFAFA] to-[#EAEAEA]">
      <div className="container mx-auto p-6">
        <div className="mb-8">
          <h1 className="text-3xl font-bold flex items-center mb-2 text-[#2E2E2E]">
            <Award className="mr-2 h-8 w-8 text-[#2ECC71]" />
            Property Certification
          </h1>
          <p className="text-[#7F8C8D]">
            Track and update certification status for your properties. Complete all steps to achieve certified status.
          </p>
        </div>
        
        <Tabs defaultValue="inProgress" className="w-full">
          <TabsList className="mb-6 bg-[#FFFFFF] p-1 rounded-lg">
            <TabsTrigger 
              value="inProgress" 
              className="flex items-center data-[state=active]:bg-[#2ECC71] data-[state=active]:text-white data-[state=inactive]:text-[#2E2E2E]"
            >
              <Info className="mr-2 h-4 w-4" />
              In Progress ({inProgressProperties.length})
            </TabsTrigger>
            <TabsTrigger 
              value="certified" 
              className="flex items-center data-[state=active]:bg-[#2ECC71] data-[state=active]:text-white data-[state=inactive]:text-[#2E2E2E]"
            >
              <CheckCircle className="mr-2 h-4 w-4" />
              Certified ({certifiedProperties.length})
            </TabsTrigger>
            <TabsTrigger 
              value="notStarted" 
              className="flex items-center data-[state=active]:bg-[#2ECC71] data-[state=active]:text-white data-[state=inactive]:text-[#2E2E2E]"
            >
              <Home className="mr-2 h-4 w-4" />
              Not Started ({notStartedProperties.length})
            </TabsTrigger>
          </TabsList>
        
        <TabsContent value="inProgress" className="space-y-4">
          {inProgressProperties.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {inProgressProperties.map(property => (
                <Card key={property.id} className="overflow-hidden rounded-xl shadow-sm bg-white border-[#EAEAEA] hover:shadow-md transition-shadow duration-200">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-[#2E2E2E] font-bold">{property.name}</CardTitle>
                    <CardDescription className="text-[#7F8C8D]">{property.location}</CardDescription>
                  </CardHeader>
                  <CardContent className="pb-2">
                    <div className="mb-4">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-medium text-[#2E2E2E]">Certification Progress</span>
                        <span className="text-sm font-medium text-[#2E2E2E]">{property.certificationProgress || 0}%</span>
                      </div>
                      <div className="w-full bg-[#EAEAEA] rounded-full h-2">
                        <div 
                          className="bg-[#2ECC71] h-2 rounded-full" 
                          style={{ width: `${property.certificationProgress || 0}%` }}
                        ></div>
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <div className="flex items-center">
                        <div className={`w-5 h-5 rounded-full flex items-center justify-center ${(property.certificationProgress || 0) >= 25 ? 'bg-[#2ECC71]/20' : 'bg-[#EAEAEA]'}`}>
                          <CheckCircle className={`h-3 w-3 ${(property.certificationProgress || 0) >= 25 ? 'text-[#2ECC71]' : 'text-[#C0C0C0]'}`} />
                        </div>
                        <div className="ml-3">
                          <span className={`text-sm ${(property.certificationProgress || 0) >= 25 ? 'text-[#2E2E2E] font-medium' : 'text-[#7F8C8D]'}`}>Basic Info</span>
                        </div>
                      </div>
                      <div className="flex items-center">
                        <div className={`w-5 h-5 rounded-full flex items-center justify-center ${(property.certificationProgress || 0) >= 50 ? 'bg-[#2ECC71]/20' : 'bg-[#EAEAEA]'}`}>
                          <CheckCircle className={`h-3 w-3 ${(property.certificationProgress || 0) >= 50 ? 'text-[#2ECC71]' : 'text-[#C0C0C0]'}`} />
                        </div>
                        <div className="ml-3">
                          <span className={`text-sm ${(property.certificationProgress || 0) >= 50 ? 'text-[#2E2E2E] font-medium' : 'text-[#7F8C8D]'}`}>Safety Standards</span>
                        </div>
                      </div>
                      <div className="flex items-center">
                        <div className={`w-5 h-5 rounded-full flex items-center justify-center ${(property.certificationProgress || 0) >= 75 ? 'bg-[#2ECC71]/20' : 'bg-[#EAEAEA]'}`}>
                          <CheckCircle className={`h-3 w-3 ${(property.certificationProgress || 0) >= 75 ? 'text-[#2ECC71]' : 'text-[#C0C0C0]'}`} />
                        </div>
                        <div className="ml-3">
                          <span className={`text-sm ${(property.certificationProgress || 0) >= 75 ? 'text-[#2E2E2E] font-medium' : 'text-[#7F8C8D]'}`}>Amenities Verification</span>
                        </div>
                      </div>
                      <div className="flex items-center">
                        <div className={`w-5 h-5 rounded-full flex items-center justify-center ${(property.certificationProgress || 0) >= 100 ? 'bg-[#2ECC71]/20' : 'bg-[#EAEAEA]'}`}>
                          <CheckCircle className={`h-3 w-3 ${(property.certificationProgress || 0) >= 100 ? 'text-[#2ECC71]' : 'text-[#C0C0C0]'}`} />
                        </div>
                        <div className="ml-3">
                          <span className={`text-sm ${(property.certificationProgress || 0) >= 100 ? 'text-[#2E2E2E] font-medium' : 'text-[#7F8C8D]'}`}>Final Inspection</span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button 
                      onClick={() => startCertification(property.id)}
                      className="w-full bg-[#2ECC71] hover:bg-[#27AE60] text-white font-medium rounded-md"
                    >
                      Continue Certification
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center p-10 bg-muted rounded-lg">
              <Info className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
              <p className="text-muted-foreground mb-4">No properties are currently in the certification process.</p>
              <Button variant="outline" asChild>
                <Link href="#notStarted">View properties to start certification</Link>
              </Button>
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="certified" className="space-y-4">
          {certifiedProperties.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {certifiedProperties.map(property => (
                <Card key={property.id} className="overflow-hidden">
                  <CardHeader className="pb-2">
                    <div className="flex items-center justify-between">
                      <CardTitle>{property.name}</CardTitle>
                      <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                        <CheckCircle className="h-5 w-5 text-green-600" />
                      </div>
                    </div>
                    <CardDescription>{property.location}</CardDescription>
                  </CardHeader>
                  <CardContent className="pb-2">
                    <div className="p-4 bg-green-50 rounded-lg mb-4">
                      <div className="flex items-center">
                        <Award className="h-5 w-5 text-amber-500 mr-2" />
                        <span className="font-medium text-green-700">Fully Certified</span>
                      </div>
                      <p className="text-sm text-green-600 mt-1">
                        This property meets all certification requirements and standards.
                      </p>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button 
                      variant="outline"
                      asChild
                      className="w-full"
                    >
                      <Link href={`/property-details/${property.id}`}>
                        View Property Details
                      </Link>
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center p-10 bg-muted rounded-lg">
              <Award className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
              <p className="text-muted-foreground mb-4">No properties have been certified yet.</p>
              <p className="text-sm text-muted-foreground">
                Complete the certification process for your properties to achieve certified status.
              </p>
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="notStarted" className="space-y-4" id="notStarted">
          {notStartedProperties.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {notStartedProperties.map(property => (
                <Card key={property.id} className="overflow-hidden">
                  <CardHeader className="pb-2">
                    <CardTitle>{property.name}</CardTitle>
                    <CardDescription>{property.location}</CardDescription>
                  </CardHeader>
                  <CardContent className="pb-2">
                    <div className="p-4 bg-gray-50 rounded-lg mb-4">
                      <div className="flex items-center">
                        <Info className="h-5 w-5 text-gray-400 mr-2" />
                        <span className="font-medium text-gray-700">Not Certified</span>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">
                        Start the certification process to enhance your property's credibility and value.
                      </p>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button 
                      onClick={() => startCertification(property.id)}
                      className="w-full"
                    >
                      Start Certification
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center p-10 bg-muted rounded-lg">
              <Home className="h-12 w-12 mx-auto text-muted-foreground mb-2" />
              <p className="text-muted-foreground mb-4">You don't have any uncertified properties.</p>
              <Button variant="outline" asChild>
                <Link href="/add-property">Add a New Property</Link>
              </Button>
            </div>
          )}
        </TabsContent>
      </Tabs>
      
      {/* Certification Form Dialog */}
      <Dialog open={isFormDialogOpen} onOpenChange={setIsFormDialogOpen}>
        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Award className="mr-2 h-5 w-5 text-amber-500" />
              {selectedProperty?.name} - Certification Process
            </DialogTitle>
            <DialogDescription>
              Complete all required checks in each section to certify this property.
            </DialogDescription>
          </DialogHeader>
          
          <div className="mb-6">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">Overall Progress</span>
              <span className="text-sm font-medium">{calculateProgressPercentage(certificationForm)}%</span>
            </div>
            <Progress value={calculateProgressPercentage(certificationForm)} className="h-2" />
            
            <div className="flex items-center justify-between mt-4">
              <div className={`flex items-center ${activeStep === 'basicInfo' ? 'text-primary' : 'text-muted-foreground'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-2 ${
                  activeStep === 'basicInfo' ? 'bg-primary text-white' : 
                  getStepProgress('basicInfo') <= calculateProgressPercentage(certificationForm) ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'
                }`}>
                  {getStepProgress('basicInfo') <= calculateProgressPercentage(certificationForm) ? <Check className="h-4 w-4" /> : "1"}
                </div>
                <span className="text-sm">Basic Info</span>
              </div>
              <div className={`flex items-center ${activeStep === 'safety' ? 'text-primary' : 'text-muted-foreground'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-2 ${
                  activeStep === 'safety' ? 'bg-primary text-white' : 
                  getStepProgress('safety') <= calculateProgressPercentage(certificationForm) ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'
                }`}>
                  {getStepProgress('safety') <= calculateProgressPercentage(certificationForm) ? <Check className="h-4 w-4" /> : "2"}
                </div>
                <span className="text-sm">Safety</span>
              </div>
              <div className={`flex items-center ${activeStep === 'amenities' ? 'text-primary' : 'text-muted-foreground'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-2 ${
                  activeStep === 'amenities' ? 'bg-primary text-white' : 
                  getStepProgress('amenities') <= calculateProgressPercentage(certificationForm) ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'
                }`}>
                  {getStepProgress('amenities') <= calculateProgressPercentage(certificationForm) ? <Check className="h-4 w-4" /> : "3"}
                </div>
                <span className="text-sm">Amenities</span>
              </div>
              <div className={`flex items-center ${activeStep === 'finalInspection' ? 'text-primary' : 'text-muted-foreground'}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-2 ${
                  activeStep === 'finalInspection' ? 'bg-primary text-white' : 
                  getStepProgress('finalInspection') <= calculateProgressPercentage(certificationForm) ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'
                }`}>
                  {getStepProgress('finalInspection') <= calculateProgressPercentage(certificationForm) ? <Check className="h-4 w-4" /> : "4"}
                </div>
                <span className="text-sm">Final</span>
              </div>
            </div>
          </div>
          
          <Separator className="my-6" />
          
          {/* Basic Info Step */}
          {activeStep === 'basicInfo' && (
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center">
                <Info className="h-5 w-5 mr-2 text-blue-500" />
                Basic Information Verification
              </h3>
              <p className="text-sm text-muted-foreground mb-4">
                Confirm that all basic property information is accurate and complete.
              </p>
              
              <div className="space-y-4">
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasAccurateAddressInfo" 
                    checked={certificationForm.hasAccurateAddressInfo}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasAccurateAddressInfo', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasAccurateAddressInfo" className="font-medium">
                      Accurate Address Information
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Full address including unit number and postal code is verified and correct
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasAccuratePropertyType" 
                    checked={certificationForm.hasAccuratePropertyType}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasAccuratePropertyType', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasAccuratePropertyType" className="font-medium">
                      Correct Property Type
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Property is correctly categorized (apartment, house, condo, villa, etc.)
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasAccurateOwnershipDocs" 
                    checked={certificationForm.hasAccurateOwnershipDocs}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasAccurateOwnershipDocs', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasAccurateOwnershipDocs" className="font-medium">
                      Ownership Documentation
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Valid ownership or rental subletting documentation is on file
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Safety Standards Step */}
          {activeStep === 'safety' && (
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center">
                <ShieldCheck className="h-5 w-5 mr-2 text-red-500" />
                Safety Standards Verification
              </h3>
              <p className="text-sm text-muted-foreground mb-4">
                Ensure the property meets all required safety standards for occupants.
              </p>
              
              <div className="space-y-4">
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasSmokeDetectors" 
                    checked={certificationForm.hasSmokeDetectors}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasSmokeDetectors', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasSmokeDetectors" className="font-medium">
                      Smoke Detectors
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Working smoke detectors installed on every floor and in every bedroom
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasFireExtinguisher" 
                    checked={certificationForm.hasFireExtinguisher}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasFireExtinguisher', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasFireExtinguisher" className="font-medium">
                      Fire Extinguisher
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      At least one accessible and up-to-date fire extinguisher on premises
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasEmergencyExits" 
                    checked={certificationForm.hasEmergencyExits}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasEmergencyExits', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasEmergencyExits" className="font-medium">
                      Emergency Exits
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Clear emergency exit routes and instructions provided
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasFirstAidKit" 
                    checked={certificationForm.hasFirstAidKit}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasFirstAidKit', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasFirstAidKit" className="font-medium">
                      First Aid Kit
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Stocked first aid kit available for guest emergencies
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Amenities Verification Step */}
          {activeStep === 'amenities' && (
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center">
                <Home className="h-5 w-5 mr-2 text-violet-500" />
                Amenities Verification
              </h3>
              <p className="text-sm text-muted-foreground mb-4">
                Confirm that all listed amenities are present and in good working condition.
              </p>
              
              <div className="space-y-4">
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasVerifiedBedrooms" 
                    checked={certificationForm.hasVerifiedBedrooms}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasVerifiedBedrooms', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasVerifiedBedrooms" className="font-medium">
                      Bedrooms Verified
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Confirms number of bedrooms and beds is accurate as listed
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasVerifiedBathrooms" 
                    checked={certificationForm.hasVerifiedBathrooms}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasVerifiedBathrooms', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasVerifiedBathrooms" className="font-medium">
                      Bathrooms Verified
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      All bathrooms are functional and match the listing description
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasVerifiedKitchenAppliances" 
                    checked={certificationForm.hasVerifiedKitchenAppliances}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasVerifiedKitchenAppliances', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasVerifiedKitchenAppliances" className="font-medium">
                      Kitchen Appliances
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      All kitchen appliances and equipment function properly
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasVerifiedInternetAccess" 
                    checked={certificationForm.hasVerifiedInternetAccess}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasVerifiedInternetAccess', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasVerifiedInternetAccess" className="font-medium">
                      Internet Access
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      High-speed internet works throughout the property
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Final Inspection Step */}
          {activeStep === 'finalInspection' && (
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center">
                <Award className="h-5 w-5 mr-2 text-amber-500" />
                Final Inspection & Approval
              </h3>
              <p className="text-sm text-muted-foreground mb-4">
                Complete the final verification and approval process for certification.
              </p>
              
              <div className="space-y-4">
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasPassedOnSiteInspection" 
                    checked={certificationForm.hasPassedOnSiteInspection}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasPassedOnSiteInspection', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasPassedOnSiteInspection" className="font-medium">
                      On-Site Inspection
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Property has been physically inspected by Argento Homes representative
                    </p>
                  </div>
                </div>
                
                <div className="flex items-start space-x-3">
                  <Checkbox 
                    id="hasCompletedAllRequirements" 
                    checked={certificationForm.hasCompletedAllRequirements}
                    onCheckedChange={(checked: boolean | "indeterminate") => handleFormChange('hasCompletedAllRequirements', checked === true)}
                  />
                  <div className="space-y-1">
                    <Label htmlFor="hasCompletedAllRequirements" className="font-medium">
                      All Requirements Complete
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      All certification requirements have been met and verified
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="p-4 bg-amber-50 rounded-lg mt-6">
                <div className="flex items-start">
                  <Info className="h-5 w-5 text-amber-500 mr-3 mt-0.5" />
                  <div>
                    <h4 className="font-medium text-amber-800">Certification Confirmation</h4>
                    <p className="text-sm text-amber-700 mt-1">
                      By completing this final step, you confirm that all requirements have been met and the property
                      is ready for certification. Once certified, your property will be highlighted to potential guests
                      as meeting Argento Homes' quality and safety standards.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter className="flex items-center justify-between mt-6">
            {activeStep !== 'basicInfo' && (
              <Button 
                variant="outline" 
                onClick={handlePreviousStep}
                disabled={updatePropertyMutation.isPending}
              >
                Previous Step
              </Button>
            )}
            {activeStep === 'basicInfo' && (
              <Button 
                variant="outline" 
                onClick={() => setIsFormDialogOpen(false)}
                disabled={updatePropertyMutation.isPending}
              >
                Cancel
              </Button>
            )}
            
            <Button 
              onClick={handleNextStep}
              disabled={updatePropertyMutation.isPending}
            >
              {activeStep === 'finalInspection' ? 'Complete Certification' : 'Next Step'}
              {updatePropertyMutation.isPending && (
                <span className="ml-2 animate-spin">⟳</span>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      </div>
    </div>
  );
}